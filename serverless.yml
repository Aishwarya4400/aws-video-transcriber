service: aws-captions

plugins:
  - 'serverless-parameters'

provider:
  name: aws
  region: ap-southeast-2  
  endpointType: REGIONAL
  runtime: nodejs8.10
  stage: dev
  profile: transcribe
  logRetentionInDays: 7

package:
  individually: true

custom:
  stage: '${opt:stage, self:provider.stage}'

  parameters:
    TranscribeLanguage:
      Type: String
      AllowedValues: 
        - 'en-AU'
        - 'en-US'
        - 'en-GB'
        - 'es-US'
        - 'de-DE'
        - 'pt-BR'
        - 'fr-CA'
        - 'fr-FR'
        - 'it-IT'
      Default: 'en-AU'
      Description: 'The language that Transcribe uses' 

    APIKey:
      Type: String
      MinLength: 10
      MaxLength: 70
      AllowedPattern: '[a-zA-Z0-9]*'
      ConstraintDescription: 'must only contain letters (uppercase and lowercase) and numbers, min length 20, max length 70'
      Default: 'JustAnApiKeyJustAnApiKey'
      Description: 'An API key to use for accessing the website'      

functions:

  ExtractAudio:
    handler: lambda/extractaudio.handler
    name: '${self:custom.stage}-${self:service}-extractaudio'
    description: 'Uses Elastic Transcoder to extract MP3 audio and produce web friendly MP4 from input videos'
    role: !GetAtt LambdaRole.Arn
    depends: S3BucketVideo
    events:
      - s3: 
          bucket: video
          event: s3:ObjectCreated:*
          rules:
            - prefix: videos/    
    environment:    
      INPUT_BUCKET: !Join ['', [ '${self:custom.stage}-${self:service}-video-', !Ref AWS::Region, '-', !Ref AWS::AccountId ] ]
      OUTPUT_AUDIO_BUCKET: !Join ['', [ '${self:custom.stage}-${self:service}-audio-', !Ref AWS::Region, '-', !Ref AWS::AccountId ] ]
      OUTPUT_VIDEO_BUCKET: !Join ['', [ '${self:custom.stage}-${self:service}-video-', !Ref AWS::Region, '-', !Ref AWS::AccountId ] ]
      OUTPUT_AUDIO_KEY_PREFIX: 'audio'
      OUTPUT_VIDEO_KEY_PREFIX: 'transcoded'
      TRANSCODER_AUDIO_PIPELINE_NAME: '${self:custom.stage}-${self:service}-extractaudio'
      TRANSCODER_VIDEO_PIPELINE_NAME: '${self:custom.stage}-${self:service}-transcodevideo'
      TRANSCODER_ROLE: !GetAtt TranscoderRole.Arn
      DYNAMO_VIDEO_TABLE: !Ref VideoDynamoDBTable
      REGION: !Ref AWS::Region
    package:
      exclude:
        - '**'
      include:
        - 'lambda/extractaudio.js'
    memorySize: 128
    timeout: 15

  TranscribeAudio:
    handler: lambda/transcribeaudio.handler
    name: '${self:custom.stage}-${self:service}-transcribeaudio'
    description: 'Uses Transcribe to extract text from audio'
    role: !GetAtt LambdaRole.Arn
    depends: S3BucketAudio
    events:
      - s3: 
          bucket: audio
          event: s3:ObjectCreated:*
          rules:
            - prefix: audio/
            - suffix: .mp3      
    environment:      
      OUTPUT_BUCKET: !Join ['', [ '${self:custom.stage}-${self:service}-transcribe-', !Ref AWS::Region, '-', !Ref AWS::AccountId ] ]
      OUTPUT_KEY_PREFIX: 'transcribe'
      DYNAMO_VIDEO_TABLE: !Ref VideoDynamoDBTable
      REGION: !Ref AWS::Region
      VOCABULARY_NAME: !Join [ '', [ '${self:custom.stage}-${self:service}-', !Ref TranscribeLanguage ] ]
      TRANSCRIBE_LANGUAGE: !Ref TranscribeLanguage
    layers:
      - !Ref LambdaLayer
    package:
      exclude:
        - '**'
      include:
        - 'lambda/transcribeaudio.js' 
    memorySize: 128
    timeout: 15        

  CreateCaptions:
    handler: lambda/createcaptions.handler
    name: '${self:custom.stage}-${self:service}-createcaptions'
    description: 'Creates captions for videos from transcription results'
    role: !GetAtt LambdaRole.Arn
    depends: S3BucketTranscribe
    events:
      - s3: 
          bucket: transcribe
          event: s3:ObjectCreated:*
          rules:
            - suffix: .json      
    environment:  
      INPUT_BUCKET: !Join ['', [ '${self:custom.stage}-${self:service}-transcribe-', !Ref AWS::Region, '-', !Ref AWS::AccountId ] ]
      DYNAMO_VIDEO_TABLE: !Ref VideoDynamoDBTable
      DYNAMO_CAPTION_TABLE: !Ref CaptionDynamoDBTable
      DYNAMO_CONFIG_TABLE: !Ref ConfigDynamoDBTable
      REGION: !Ref AWS::Region
    package:
      exclude:
        - '**'
      include:
        - 'lambda/createcaptions.js'
    memorySize: 512
    timeout: 60       

  GetVideos:
    handler: lambda/getvideos.handler
    name: '${self:custom.stage}-${self:service}-getvideos'
    description: 'Loads videos from DynamoDB'
    role: !GetAtt LambdaRole.Arn
    environment: 
      DYNAMO_VIDEO_TABLE: !Ref VideoDynamoDBTable
      REGION: !Ref AWS::Region
    package:
      exclude:
        - '**'
      include:
        - 'lambda/getvideos.js'      
    events:
      - http:
          path: videos
          method: get
          cors: true
          private: true
    memorySize: 128
    timeout: 29 

  GetVideo:
    handler: lambda/getvideo.handler
    name: '${self:custom.stage}-${self:service}-getvideo'
    description: 'Loads a single video from DynamoDB'
    role: !GetAtt LambdaRole.Arn
    environment: 
      DYNAMO_VIDEO_TABLE: !Ref VideoDynamoDBTable
      DYNAMO_CAPTION_TABLE: !Ref CaptionDynamoDBTable
      REGION: !Ref AWS::Region
      VIDEO_BUCKET: !Join ['', [ '${self:custom.stage}-${self:service}-video-', !Ref AWS::Region, '-', !Ref AWS::AccountId ] ]
    package:
      exclude:
        - '**'
      include:
        - 'lambda/getvideo.js'      
    events:
      - http:
          path: video/{videoId}
          method: get
          cors: true
          private: true
    memorySize: 128
    timeout: 29 

  UpdateVideoStatus:
    handler: lambda/updatevideostatus.handler
    name: '${self:custom.stage}-${self:service}-updatevideostatus'
    description: 'Updates the status of a video in DynamoDB'
    role: !GetAtt LambdaRole.Arn
    environment: 
      DYNAMO_VIDEO_TABLE: !Ref VideoDynamoDBTable
      REGION: !Ref AWS::Region
    package:
      exclude:
        - '**'
      include:
        - 'lambda/updatevideostatus.js'      
    events:
      - http:
          path: videostatus/{videoId}
          method: post
          cors: true
          private: true
    memorySize: 128
    timeout: 29  

  UpdateVideoName:
    handler: lambda/updatevideoname.handler
    name: '${self:custom.stage}-${self:service}-updatevideoname'
    description: 'Updates the name of a video in DynamoDB'
    role: !GetAtt LambdaRole.Arn
    environment: 
      DYNAMO_VIDEO_TABLE: !Ref VideoDynamoDBTable
      REGION: !Ref AWS::Region
    package:
      exclude:
        - '**'
      include:
        - 'lambda/updatevideoname.js'      
    events:
      - http:
          path: videoname/{videoId}
          method: post
          cors: true
          private: true
    memorySize: 128
    timeout: 29  

  UpdateVideoDescription:
    handler: lambda/updatevideodescription.handler
    name: '${self:custom.stage}-${self:service}-updatevideodescription'
    description: 'Updates the description of a video in DynamoDB'
    role: !GetAtt LambdaRole.Arn
    environment: 
      DYNAMO_VIDEO_TABLE: !Ref VideoDynamoDBTable
      REGION: !Ref AWS::Region
    package:
      exclude:
        - '**'
      include:
        - 'lambda/updatevideodescription.js'      
    events:
      - http:
          path: videodescription/{videoId}
          method: post
          cors: true
          private: true
    memorySize: 128
    timeout: 29          

  DeleteVideo:
    handler: lambda/deletevideo.handler
    name: '${self:custom.stage}-${self:service}-deletevideo'
    description: 'Purges a single video from the system'
    role: !GetAtt LambdaRole.Arn
    environment: 
      REGION: !Ref AWS::Region      
      DYNAMO_VIDEO_TABLE: !Ref VideoDynamoDBTable
      DYNAMO_CAPTION_TABLE: !Ref CaptionDynamoDBTable
      VIDEO_BUCKET: !Join ['', [ '${self:custom.stage}-${self:service}-video-', !Ref AWS::Region, '-', !Ref AWS::AccountId ] ]
      AUDIO_BUCKET: !Join ['', [ '${self:custom.stage}-${self:service}-audio-', !Ref AWS::Region, '-', !Ref AWS::AccountId ] ]
      TRANSCRIBE_BUCKET: !Ref S3BucketTranscribe
    layers:
      - !Ref LambdaLayer     
    package:
      exclude:
        - '**'
      include:
        - 'lambda/deletevideo.js' 
    events:
      - http:
          path: video/{videoId}
          method: delete
          cors: true
          private: true
    memorySize: 128
    timeout: 29

  ReprocessVideo:
    handler: lambda/reprocessvideo.handler
    name: '${self:custom.stage}-${self:service}-reprocessvideo'
    description: 'Reprocesses a video'
    role: !GetAtt LambdaRole.Arn
    environment: 
      REGION: !Ref AWS::Region      
      DYNAMO_VIDEO_TABLE: !Ref VideoDynamoDBTable
      VIDEO_BUCKET: !Join ['', [ '${self:custom.stage}-${self:service}-video-', !Ref AWS::Region, '-', !Ref AWS::AccountId ] ]
      AUDIO_BUCKET: !Join ['', [ '${self:custom.stage}-${self:service}-audio-', !Ref AWS::Region, '-', !Ref AWS::AccountId ] ]
      TRANSCRIBE_BUCKET: !Ref S3BucketTranscribe
      EXTRACT_AUDIO_FUNCTION: '${self:custom.stage}-${self:service}-extractaudio'
    layers:
      - !Ref LambdaLayer     
    package:
      exclude:
        - '**'
      include:
        - 'lambda/reprocessvideo.js' 
    events:
      - http:
          path: video/{videoId}
          method: patch
          cors: true
          private: true
    memorySize: 128
    timeout: 29 

  GetUpload:
    handler: lambda/getupload.handler
    name: '${self:custom.stage}-${self:service}-getupload'
    description: 'Fetches a signed URL for uploading video into S3'
    role: !GetAtt LambdaRole.Arn
    environment: 
      REGION: !Ref AWS::Region
      VIDEO_BUCKET: !Join ['', [ '${self:custom.stage}-${self:service}-video-', !Ref AWS::Region, '-', !Ref AWS::AccountId ] ]
    package:
      exclude:
        - '**'
      include:
        - 'lambda/getupload.js'      
    events:
      - http:
          path: upload/{uploadFile}
          method: get
          cors: true
          private: true
    memorySize: 128
    timeout: 29     

  PutCaption:
    handler: lambda/putcaption.handler
    name: '${self:custom.stage}-${self:service}-putcaption'
    description: 'Saves captions to DynamoDB'
    role: !GetAtt LambdaRole.Arn
    environment: 
      DYNAMO_CAPTION_TABLE: !Ref CaptionDynamoDBTable
      REGION: !Ref AWS::Region
    package:
      exclude:
        - '**'
      include:
        - 'lambda/putcaption.js'      
    events:
      - http:
          path: caption/{videoId}
          method: put
          cors: true
          private: true
    memorySize: 128
    timeout: 29

  GetCaption:
    handler: lambda/getcaption.handler
    name: '${self:custom.stage}-${self:service}-getcaption'
    description: 'Fetches captions in WEBVTT format'
    role: !GetAtt LambdaRole.Arn
    environment: 
      DYNAMO_CAPTION_TABLE: !Ref CaptionDynamoDBTable
      REGION: !Ref AWS::Region
    package:
      exclude:
        - '**'
      include:
        - 'lambda/getcaption.js'      
    events:
      - http:
          path: caption/{videoId}
          method: get
          cors: true
          private: true
    memorySize: 128
    timeout: 29    

  GetVocabulary:
    handler: lambda/getvocabulary.handler
    name: '${self:custom.stage}-${self:service}-getvocabulary'
    description: 'Loads vocabulary from DynamoDB'
    role: !GetAtt LambdaRole.Arn
    environment: 
      DYNAMO_CONFIG_TABLE: !Ref ConfigDynamoDBTable
      REGION: !Ref AWS::Region
      VOCABULARY_NAME: !Join [ '', [ '${self:custom.stage}-${self:service}-', !Ref TranscribeLanguage ] ]
    package:
      exclude:
        - '**'
      include:
        - 'lambda/getvocabulary.js'      
    events:
      - http:
          path: vocabulary
          method: get
          cors: true
          private: true
    memorySize: 128
    timeout: 29 

  HeadVocabulary:
    handler: lambda/headvocabulary.handler
    name: '${self:custom.stage}-${self:service}-headvocabulary'
    description: 'Checks if vocabulary is ready to save'
    role: !GetAtt LambdaRole.Arn
    environment: 
      REGION: !Ref AWS::Region
      VOCABULARY_NAME: !Join [ '', [ '${self:custom.stage}-${self:service}-', !Ref TranscribeLanguage ] ]
    package:
      exclude:
        - '**'
      include:
        - 'lambda/headvocabulary.js'      
    events:
      - http:
          path: vocabulary
          method: head
          cors: true
          private: true
    memorySize: 128
    timeout: 29 

  PutVocabulary:
    handler: lambda/putvocabulary.handler
    name: '${self:custom.stage}-${self:service}-putvocabulary'
    description: 'Saves vocabulary to DynamoDB'
    role: !GetAtt LambdaRole.Arn
    environment: 
      DYNAMO_CONFIG_TABLE: !Ref ConfigDynamoDBTable
      REGION: !Ref AWS::Region
      VOCABULARY_NAME: !Join [ '', [ '${self:custom.stage}-${self:service}-', !Ref TranscribeLanguage ] ]
      TRANSCRIBE_LANGUAGE: !Ref TranscribeLanguage
    package:
      exclude:
        - '**'
      include:
        - 'lambda/putvocabulary.js' 
    events:
      - http:
          path: vocabulary
          method: put
          cors: true
          private: true 
    memorySize: 128
    timeout: 29           

  GetTweaks:
    handler: lambda/gettweaks.handler
    name: '${self:custom.stage}-${self:service}-gettweaks'
    description: 'Loads tweaks from DynamoDB'
    role: !GetAtt LambdaRole.Arn
    environment: 
      DYNAMO_CONFIG_TABLE: !Ref ConfigDynamoDBTable
      REGION: !Ref AWS::Region
    package:
      exclude:
        - '**'
      include:
        - 'lambda/gettweaks.js'      
    events:
      - http:
          path: tweaks
          method: get
          cors: true
          private: true 
    memorySize: 128
    timeout: 29           

  PutTweaks:
    handler: lambda/puttweaks.handler
    name: '${self:custom.stage}-${self:service}-puttweaks'
    description: 'Saves tweaks to DynamoDB'
    role: !GetAtt LambdaRole.Arn
    environment: 
      DYNAMO_CONFIG_TABLE: !Ref ConfigDynamoDBTable
      REGION: !Ref AWS::Region
    package:
      exclude:
        - '**'
      include:
        - 'lambda/puttweaks.js'       
    events:
      - http:
          path: tweaks
          method: put
          cors: true
          private: true  
    memorySize: 128
    timeout: 29 

  BootStrap:
    handler: lambda/bootstrap.handler
    name: '${self:custom.stage}-${self:service}-bootstrap'
    description: 'Bootstraps videos to process into S3'
    role: !GetAtt LambdaRole.Arn
    environment: 
      OUTPUT_BUCKET: !Join ['', [ '${self:custom.stage}-${self:service}-video-', !Ref AWS::Region, '-', !Ref AWS::AccountId ] ]
      REGION: !Ref AWS::Region
    package:
      exclude:
        - '**'
      include:
        - 'lambda/bootstrap.js'       
    memorySize: 2048
    timeout: 900

  CustomResource:
    handler: lambda/customresource.handler
    name: '${self:custom.stage}-${self:service}-customresource'
    description: 'Performs custom cloudformation initialisation'
    role: !GetAtt LambdaRole.Arn
    package:
      exclude:
        - '**'
      include:
        - 'lambda/customresource.js'
        - 'node_modules/axios/**'
        - 'node_modules/follow-redirects/**'
        - 'node_modules/is-buffer/**'
        - 'node_modules/debug/**'
        - 'node_modules/ms/**'
    memorySize: 128
    timeout: 600

resources:
  Resources:

    LambdaLayer:
      Type: 'AWS::Lambda::LayerVersion'
      Properties:
        CompatibleRuntimes: 
          - nodejs8.10
        Content: 
          S3Bucket: aws-captions-deployment-ap-southeast-2
          S3Key: layers/aws-captions-node-sdk-layer.zip
        Description: 'Recent Node.js 8.10 AWS Node SDK'
        LayerName: '${self:custom.stage}-aws-captions-node-sdk-layer'
        LicenseInfo: Apache-2.0

    LambdaLayerPermission:
      Type: 'AWS::Lambda::LayerVersionPermission'
      Properties:
        Action: lambda:GetLayerVersion
        LayerVersionArn: !Ref LambdaLayer
        Principal: !Ref AWS::AccountId

    MyCustomResource: 
      Type: 'Custom::CustomResource'
      Version: '1.0'
      DependsOn: 
        - 'CustomResourceLambdaFunction'
      Properties: 
        ServiceToken: !Join [':', [ 'arn:aws:lambda', !Ref AWS::Region, !Ref AWS::AccountId, 'function:${self:custom.stage}-${self:service}-customresource' ]]
        InputManifest:
          Bucket: aws-captions-deployment-ap-southeast-2
          Key: web/manifest.json
        WebDeploySource:
          Bucket: aws-captions-deployment-ap-southeast-2
        WebDeployTarget:
          Bucket: !Ref PublicBucket
          Key: 'web/'
        APIGateway:
          Url: !Join [ '', [ 'https://', !Ref ApiGatewayRestApi, '.execute-api.', !Ref AWS::Region, '.amazonaws.com/', '${self:custom.stage}' ]]
          Id: !Ref ApiGatewayRestApi
          Stage: '${self:custom.stage}'
          PlanName: '${self:custom.stage}-${self:service}-usageplan'
          Key:
            Name: ${self:custom.stage}-${self:service}-apikey
            Value: !Ref APIKey

    LambdaPolicy:
      Type: 'AWS::IAM::ManagedPolicy'
      Properties:
        ManagedPolicyName: !Join [ '', [ !Ref AWS::StackName, '-${self:custom.stage}-${self:service}-lambda-policy' ]]
        Description: 'Managed policy for lambdas'
        PolicyDocument: 
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - apigateway:*
              Resource:
                - '*'
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !Join [ '', [ 'arn:aws:lambda:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':function:ExtractAudio' ]]
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: 
                - !Join [ ':', [ 'arn:aws:logs', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'log-group:/aws/lambda/*:*:*' ] ]
            - Effect: Allow
              Action:
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource: 
                - !GetAtt VideoDynamoDBTable.Arn
                - !Join [ '', [ !GetAtt VideoDynamoDBTable.Arn, '/index/*' ] ]
                - !GetAtt CaptionDynamoDBTable.Arn
                - !GetAtt ConfigDynamoDBTable.Arn
            - Effect: Allow
              Action:
                - elastictranscoder:CreatePipeline
                - elastictranscoder:Read*
                - elastictranscoder:List*
                - elastictranscoder:*Job
                - elastictranscoder:*Preset
              Resource: 
                - '*'
            - Effect: Allow
              Action:
                - transcribe:CreateVocabulary
                - transcribe:UpdateVocabulary
                - transcribe:StartTranscriptionJob
                - transcribe:ListVocabularies
                - transcribe:DeleteTranscriptionJob
              Resource: 
                - '*'        
            - Effect: Allow
              Action:
                - 's3:*'
              Resource: 
                - !Join [ '', [ 'arn:aws:s3:::${self:custom.stage}-${self:service}-video-', !Ref AWS::Region, '-', !Ref AWS::AccountId ]]
                - !Join [ '', [ 'arn:aws:s3:::${self:custom.stage}-${self:service}-video-', !Ref AWS::Region, '-', !Ref AWS::AccountId, '/*' ]]
                - !Join [ '', [ 'arn:aws:s3:::${self:custom.stage}-${self:service}-audio-', !Ref AWS::Region, '-', !Ref AWS::AccountId ]]
                - !Join [ '', [ 'arn:aws:s3:::${self:custom.stage}-${self:service}-audio-', !Ref AWS::Region, '-', !Ref AWS::AccountId, '/*' ]]
                - !Join [ '', [ 'arn:aws:s3:::${self:custom.stage}-${self:service}-transcribe-', !Ref AWS::Region, '-', !Ref AWS::AccountId ]]
                - !Join [ '', [ 'arn:aws:s3:::${self:custom.stage}-${self:service}-transcribe-', !Ref AWS::Region, '-', !Ref AWS::AccountId, '/*' ]]
                - !Join [ '', [ 'arn:aws:s3:::${self:custom.stage}-${self:service}-public-', !Ref AWS::Region, '-', !Ref AWS::AccountId ]]
                - !Join [ '', [ 'arn:aws:s3:::${self:custom.stage}-${self:service}-public-', !Ref AWS::Region, '-', !Ref AWS::AccountId, '/*' ]]                
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - !Join [ '', [ 'arn:aws:iam::', !Ref AWS::AccountId, ':role/', !Ref AWS::StackName, '-${self:custom.stage}-${self:service}-elastic-transcoder-role' ]]

    LambdaRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Join [ '', [ !Ref AWS::StackName, '-${self:custom.stage}-${self:service}-lambda-role' ]]
        AssumeRolePolicyDocument: 
          Version: '2012-10-17'
          Statement: 
            - Effect: 'Allow'
              Principal: 
                Service: 
                  - 'lambda.amazonaws.com'
              Action: 
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Ref LambdaPolicy
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

    TrancoderPolicy:
      Type: 'AWS::IAM::ManagedPolicy'
      Properties:
        ManagedPolicyName: !Join [ '', [ !Ref AWS::StackName, '-${self:custom.stage}-${self:service}-elastic-transcoder-policy' ]]
        Description: 'Managed policy for invoking Elastic Trancoder'
        PolicyDocument: 
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action:
                - 's3:Put*'
                - 's3:ListBucket'
                - 's3:*MultipartUpload*'
                - 's3:Get*'
              Resource:
                - !Join [ '', [ 'arn:aws:s3:::${self:custom.stage}-${self:service}-video-', !Ref AWS::Region, '-', !Ref AWS::AccountId ]]
                - !Join [ '', [ 'arn:aws:s3:::${self:custom.stage}-${self:service}-video-', !Ref AWS::Region, '-', !Ref AWS::AccountId, '/*' ]]
            - Effect: 'Allow'
              Action: 'sns:Publish'
              Resource: '*'
        
    TranscoderRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Join [ '', [ !Ref AWS::StackName, '-${self:custom.stage}-${self:service}-elastic-transcoder-role' ]]
        AssumeRolePolicyDocument: 
          Version: '2012-10-17'
          Statement: 
            - Effect: 'Allow'
              Principal: 
                Service: 
                  - 'elastictranscoder.amazonaws.com'
              Action: 
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Ref TrancoderPolicy

    S3BucketVideo:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: !Join [ '', [ '${self:custom.stage}-${self:service}-video-', !Ref AWS::Region, '-', !Ref AWS::AccountId ]]
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods: 
                - 'PUT'
                - 'POST'
                - 'GET'
              MaxAge: 3000

    ExtractAudioLambdaPermissionVideoS3:
      Type: 'AWS::Lambda::Permission'
      Properties:
        #FunctionName: !Join [ '', [ 'arn:aws:lambda:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':function:ExtractAudio' ]]
        Principal: 's3.amazonaws.com'
        Action: 'lambda:InvokeFunction'
        SourceAccount: !Ref AWS::AccountId
        SourceArn: !Join [ '', [ 'arn:aws:s3:::${self:custom.stage}-${self:service}-video-', !Ref AWS::Region, '-', !Ref AWS::AccountId ]]

    S3BucketAudio:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: !Join [ '', [ '${self:custom.stage}-${self:service}-audio-', !Ref AWS::Region, '-', !Ref AWS::AccountId ]]

    TranscribeAudioLambdaPermissionAudioS3:
      Type: 'AWS::Lambda::Permission'
      Properties:
        #FunctionName: !Join [ '', [ 'arn:aws:lambda:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':function:TransscribeAudio' ]]
        Principal: 's3.amazonaws.com'
        Action: 'lambda:InvokeFunction'
        SourceAccount: !Ref AWS::AccountId
        SourceArn: !Join [ '', [ 'arn:aws:s3:::${self:custom.stage}-${self:service}-audio-', !Ref AWS::Region, '-', !Ref AWS::AccountId ]]

    PublicBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: !Join [ '', [ '${self:custom.stage}-${self:service}-public-', !Ref AWS::Region, '-', !Ref AWS::AccountId ]]
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods: 
                - 'GET'
              MaxAge: 3000

    S3BucketTranscribe:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: !Join [ '', [ '${self:custom.stage}-${self:service}-transcribe-', !Ref AWS::Region, '-', !Ref AWS::AccountId ]]

    CreateCaptionsLambdaPermissionTranscribeS3:
      Type: 'AWS::Lambda::Permission'
      Properties:
        #FunctionName: !Join [ '', [ 'arn:aws:lambda:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':function:CreateCaptions' ]]
        Principal: 's3.amazonaws.com'
        Action: 'lambda:InvokeFunction'
        SourceAccount: !Ref AWS::AccountId
        SourceArn: !Join [ '', [ 'arn:aws:s3:::${self:custom.stage}-${self:service}-transcribe-', !Ref AWS::Region, '-', !Ref AWS::AccountId ]]

    VideoDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: '${self:custom.stage}-${self:service}-videos'
        AttributeDefinitions:
          - AttributeName: videoId
            AttributeType: S
          - AttributeName: s3VideoPath
            AttributeType: S             
        KeySchema:
          - AttributeName: videoId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: s3VideoPathIndex
            KeySchema:
            - AttributeName: s3VideoPath
              KeyType: HASH
            - AttributeName: videoId
              KeyType: RANGE
            Projection:
              ProjectionType: ALL

    ConfigDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: '${self:custom.stage}-${self:service}-config'     
        AttributeDefinitions:
          - AttributeName: configId
            AttributeType: S
        KeySchema:
          - AttributeName: configId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    CaptionDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: '${self:custom.stage}-${self:service}-captions'
        AttributeDefinitions:
          - AttributeName: videoId
            AttributeType: S
        KeySchema:
          - AttributeName: videoId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

  Outputs:
    
    Website:
      Description: Link to the public website
      Value: !Join [ '', [ 'https://s3-', !Ref AWS::Region, '.amazonaws.com/', '${self:custom.stage}-${self:service}-public-', !Ref AWS::Region, '-', !Ref AWS::AccountId, '/index.html' ]]
      Export:
        Name: ${self:custom.stage}-${self:service}-website
    APIKey:
      Description: API Key to use when accessing the site
      Value: !Ref APIKey
      Export:
        Name: ${self:custom.stage}-${self:service}-apikey        
    APIUrl:
      Description: The API Gateway base url
      Value: !Join [ '', [ 'https://', !Ref ApiGatewayRestApi, '.execute-api.', !Ref AWS::Region, '.amazonaws.com/', '${self:custom.stage}' ]]
      Export:
        Name: '${self:custom.stage}-${self:service}-api-url'

